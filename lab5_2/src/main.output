Terminals unused in grammar

   LBRACK
   RBRACK
   LBRACE
   RBRACE
   BOOL
   LOP_EQ


State 28 conflicts: 2 shift/reduce
State 29 conflicts: 5 shift/reduce
State 32 conflicts: 1 shift/reduce
State 43 conflicts: 5 shift/reduce
State 44 conflicts: 5 shift/reduce
State 45 conflicts: 5 shift/reduce
State 46 conflicts: 5 shift/reduce
State 47 conflicts: 5 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: SEMICOLON
    5          | declaration SEMICOLON
    6          | if_else

    7 if_else: IF bool_statements statement ELSE statement
    8        | IF bool_statements statement

    9 bool_statements: LPAREN bool_statements RPAREN
   10                | bool_statements AND bool_statement
   11                | bool_statements OR bool_statement
   12                | NOT bool_statements
   13                | bool_statement

   14 bool_statement: expr

   15 declaration: T IDENTIFIER LOP_ASSIGN expr
   16            | T IDENTIFIER

   17 expr: expr ADD expr
   18     | expr SUB expr
   19     | NEG expr
   20     | expr MUL expr
   21     | expr DIV expr
   22     | expr MOD expr
   23     | IDENTIFIER
   24     | INTEGER
   25     | CHAR
   26     | STRING

   27 T: T_INT
   28  | T_CHAR
   29  | T_BOOL
   30  | T_STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 7 8
ELSE (259) 7
T_CHAR (260) 28
T_INT (261) 27
T_STRING (262) 30
T_BOOL (263) 29
LOP_ASSIGN (264) 15
SEMICOLON (265) 4 5
LPAREN (266) 9
RPAREN (267) 9
LBRACK (268)
RBRACK (269)
LBRACE (270)
RBRACE (271)
IDENTIFIER (272) 15 16 23
INTEGER (273) 24
CHAR (274) 25
BOOL (275)
STRING (276) 26
ADD (277) 17
SUB (278) 18
MUL (279) 20
DIV (280) 21
MOD (281) 22
OR (282) 11
AND (283) 10
NOT (284) 12
NEG (285) 19
LOP_EQ (286)


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
program (33)
    on left: 1, on right: 0
statements (34)
    on left: 2 3, on right: 1 3
statement (35)
    on left: 4 5 6, on right: 2 3 7 8
if_else (36)
    on left: 7 8, on right: 6
bool_statements (37)
    on left: 9 10 11 12 13, on right: 7 8 9 10 11 12
bool_statement (38)
    on left: 14, on right: 10 11 13
declaration (39)
    on left: 15 16, on right: 5
expr (40)
    on left: 17 18 19 20 21 22 23 24 25 26, on right: 14 15 17 18 19
    20 21 22
T (41)
    on left: 27 28 29 30, on right: 15 16


State 0

    0 $accept: . program $end

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6

    program      go to state 7
    statements   go to state 8
    statement    go to state 9
    if_else      go to state 10
    declaration  go to state 11
    T            go to state 12


State 1

    7 if_else: IF . bool_statements statement ELSE statement
    8        | IF . bool_statements statement

    LPAREN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NOT         shift, and go to state 18
    NEG         shift, and go to state 19

    bool_statements  go to state 20
    bool_statement   go to state 21
    expr             go to state 22


State 2

   28 T: T_CHAR .

    $default  reduce using rule 28 (T)


State 3

   27 T: T_INT .

    $default  reduce using rule 27 (T)


State 4

   30 T: T_STRING .

    $default  reduce using rule 30 (T)


State 5

   29 T: T_BOOL .

    $default  reduce using rule 29 (T)


State 6

    4 statement: SEMICOLON .

    $default  reduce using rule 4 (statement)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 23


State 8

    1 program: statements .
    3 statements: statements . statement

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6

    $default  reduce using rule 1 (program)

    statement    go to state 24
    if_else      go to state 10
    declaration  go to state 11
    T            go to state 12


State 9

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 10

    6 statement: if_else .

    $default  reduce using rule 6 (statement)


State 11

    5 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 25


State 12

   15 declaration: T . IDENTIFIER LOP_ASSIGN expr
   16            | T . IDENTIFIER

    IDENTIFIER  shift, and go to state 26


State 13

    9 bool_statements: LPAREN . bool_statements RPAREN

    LPAREN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NOT         shift, and go to state 18
    NEG         shift, and go to state 19

    bool_statements  go to state 27
    bool_statement   go to state 21
    expr             go to state 22


State 14

   23 expr: IDENTIFIER .

    $default  reduce using rule 23 (expr)


State 15

   24 expr: INTEGER .

    $default  reduce using rule 24 (expr)


State 16

   25 expr: CHAR .

    $default  reduce using rule 25 (expr)


State 17

   26 expr: STRING .

    $default  reduce using rule 26 (expr)


State 18

   12 bool_statements: NOT . bool_statements

    LPAREN      shift, and go to state 13
    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NOT         shift, and go to state 18
    NEG         shift, and go to state 19

    bool_statements  go to state 28
    bool_statement   go to state 21
    expr             go to state 22


State 19

   19 expr: NEG . expr

    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NEG         shift, and go to state 19

    expr  go to state 29


State 20

    7 if_else: IF bool_statements . statement ELSE statement
    8        | IF bool_statements . statement
   10 bool_statements: bool_statements . AND bool_statement
   11                | bool_statements . OR bool_statement

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6
    OR         shift, and go to state 30
    AND        shift, and go to state 31

    statement    go to state 32
    if_else      go to state 10
    declaration  go to state 11
    T            go to state 12


State 21

   13 bool_statements: bool_statement .

    $default  reduce using rule 13 (bool_statements)


State 22

   14 bool_statement: expr .
   17 expr: expr . ADD expr
   18     | expr . SUB expr
   20     | expr . MUL expr
   21     | expr . DIV expr
   22     | expr . MOD expr

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34
    MUL  shift, and go to state 35
    DIV  shift, and go to state 36
    MOD  shift, and go to state 37

    $default  reduce using rule 14 (bool_statement)


State 23

    0 $accept: program $end .

    $default  accept


State 24

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 25

    5 statement: declaration SEMICOLON .

    $default  reduce using rule 5 (statement)


State 26

   15 declaration: T IDENTIFIER . LOP_ASSIGN expr
   16            | T IDENTIFIER .

    LOP_ASSIGN  shift, and go to state 38

    $default  reduce using rule 16 (declaration)


State 27

    9 bool_statements: LPAREN bool_statements . RPAREN
   10                | bool_statements . AND bool_statement
   11                | bool_statements . OR bool_statement

    RPAREN  shift, and go to state 39
    OR      shift, and go to state 30
    AND     shift, and go to state 31


State 28

   10 bool_statements: bool_statements . AND bool_statement
   11                | bool_statements . OR bool_statement
   12                | NOT bool_statements .

    OR   shift, and go to state 30
    AND  shift, and go to state 31

    OR        [reduce using rule 12 (bool_statements)]
    AND       [reduce using rule 12 (bool_statements)]
    $default  reduce using rule 12 (bool_statements)


State 29

   17 expr: expr . ADD expr
   18     | expr . SUB expr
   19     | NEG expr .
   20     | expr . MUL expr
   21     | expr . DIV expr
   22     | expr . MOD expr

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34
    MUL  shift, and go to state 35
    DIV  shift, and go to state 36
    MOD  shift, and go to state 37

    ADD       [reduce using rule 19 (expr)]
    SUB       [reduce using rule 19 (expr)]
    MUL       [reduce using rule 19 (expr)]
    DIV       [reduce using rule 19 (expr)]
    MOD       [reduce using rule 19 (expr)]
    $default  reduce using rule 19 (expr)


State 30

   11 bool_statements: bool_statements OR . bool_statement

    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NEG         shift, and go to state 19

    bool_statement  go to state 40
    expr            go to state 22


State 31

   10 bool_statements: bool_statements AND . bool_statement

    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NEG         shift, and go to state 19

    bool_statement  go to state 41
    expr            go to state 22


State 32

    7 if_else: IF bool_statements statement . ELSE statement
    8        | IF bool_statements statement .

    ELSE  shift, and go to state 42

    ELSE      [reduce using rule 8 (if_else)]
    $default  reduce using rule 8 (if_else)


State 33

   17 expr: expr ADD . expr

    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NEG         shift, and go to state 19

    expr  go to state 43


State 34

   18 expr: expr SUB . expr

    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NEG         shift, and go to state 19

    expr  go to state 44


State 35

   20 expr: expr MUL . expr

    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NEG         shift, and go to state 19

    expr  go to state 45


State 36

   21 expr: expr DIV . expr

    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NEG         shift, and go to state 19

    expr  go to state 46


State 37

   22 expr: expr MOD . expr

    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NEG         shift, and go to state 19

    expr  go to state 47


State 38

   15 declaration: T IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 14
    INTEGER     shift, and go to state 15
    CHAR        shift, and go to state 16
    STRING      shift, and go to state 17
    NEG         shift, and go to state 19

    expr  go to state 48


State 39

    9 bool_statements: LPAREN bool_statements RPAREN .

    $default  reduce using rule 9 (bool_statements)


State 40

   11 bool_statements: bool_statements OR bool_statement .

    $default  reduce using rule 11 (bool_statements)


State 41

   10 bool_statements: bool_statements AND bool_statement .

    $default  reduce using rule 10 (bool_statements)


State 42

    7 if_else: IF bool_statements statement ELSE . statement

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6

    statement    go to state 49
    if_else      go to state 10
    declaration  go to state 11
    T            go to state 12


State 43

   17 expr: expr . ADD expr
   17     | expr ADD expr .
   18     | expr . SUB expr
   20     | expr . MUL expr
   21     | expr . DIV expr
   22     | expr . MOD expr

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34
    MUL  shift, and go to state 35
    DIV  shift, and go to state 36
    MOD  shift, and go to state 37

    ADD       [reduce using rule 17 (expr)]
    SUB       [reduce using rule 17 (expr)]
    MUL       [reduce using rule 17 (expr)]
    DIV       [reduce using rule 17 (expr)]
    MOD       [reduce using rule 17 (expr)]
    $default  reduce using rule 17 (expr)


State 44

   17 expr: expr . ADD expr
   18     | expr . SUB expr
   18     | expr SUB expr .
   20     | expr . MUL expr
   21     | expr . DIV expr
   22     | expr . MOD expr

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34
    MUL  shift, and go to state 35
    DIV  shift, and go to state 36
    MOD  shift, and go to state 37

    ADD       [reduce using rule 18 (expr)]
    SUB       [reduce using rule 18 (expr)]
    MUL       [reduce using rule 18 (expr)]
    DIV       [reduce using rule 18 (expr)]
    MOD       [reduce using rule 18 (expr)]
    $default  reduce using rule 18 (expr)


State 45

   17 expr: expr . ADD expr
   18     | expr . SUB expr
   20     | expr . MUL expr
   20     | expr MUL expr .
   21     | expr . DIV expr
   22     | expr . MOD expr

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34
    MUL  shift, and go to state 35
    DIV  shift, and go to state 36
    MOD  shift, and go to state 37

    ADD       [reduce using rule 20 (expr)]
    SUB       [reduce using rule 20 (expr)]
    MUL       [reduce using rule 20 (expr)]
    DIV       [reduce using rule 20 (expr)]
    MOD       [reduce using rule 20 (expr)]
    $default  reduce using rule 20 (expr)


State 46

   17 expr: expr . ADD expr
   18     | expr . SUB expr
   20     | expr . MUL expr
   21     | expr . DIV expr
   21     | expr DIV expr .
   22     | expr . MOD expr

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34
    MUL  shift, and go to state 35
    DIV  shift, and go to state 36
    MOD  shift, and go to state 37

    ADD       [reduce using rule 21 (expr)]
    SUB       [reduce using rule 21 (expr)]
    MUL       [reduce using rule 21 (expr)]
    DIV       [reduce using rule 21 (expr)]
    MOD       [reduce using rule 21 (expr)]
    $default  reduce using rule 21 (expr)


State 47

   17 expr: expr . ADD expr
   18     | expr . SUB expr
   20     | expr . MUL expr
   21     | expr . DIV expr
   22     | expr . MOD expr
   22     | expr MOD expr .

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34
    MUL  shift, and go to state 35
    DIV  shift, and go to state 36
    MOD  shift, and go to state 37

    ADD       [reduce using rule 22 (expr)]
    SUB       [reduce using rule 22 (expr)]
    MUL       [reduce using rule 22 (expr)]
    DIV       [reduce using rule 22 (expr)]
    MOD       [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)


State 48

   15 declaration: T IDENTIFIER LOP_ASSIGN expr .
   17 expr: expr . ADD expr
   18     | expr . SUB expr
   20     | expr . MUL expr
   21     | expr . DIV expr
   22     | expr . MOD expr

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34
    MUL  shift, and go to state 35
    DIV  shift, and go to state 36
    MOD  shift, and go to state 37

    $default  reduce using rule 15 (declaration)


State 49

    7 if_else: IF bool_statements statement ELSE statement .

    $default  reduce using rule 7 (if_else)
