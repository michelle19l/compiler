Terminals unused in grammar

   FOR
   RETURN
   LBRACK
   RBRACK
   BOOL


State 43 conflicts: 9 reduce/reduce
State 55 conflicts: 8 shift/reduce
State 75 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement
    4           | LBRACE statements RBRACE
    5           | LBRACE RBRACE

    6 statement: SEMICOLON
    7          | declaration SEMICOLON
    8          | assign SEMICOLON
    9          | if_else
   10          | while

   11 while: WHILE bool_statements statements

   12 if_else: IF bool_statements statements ELSE statements
   13        | IF bool_statements statement

   14 bool_statements: LPAREN bool_statements RPAREN
   15                | bool_statements AND bool_statement
   16                | bool_statements OR bool_statement
   17                | NOT bool_statements
   18                | bool_statement

   19 bool_statement: expr
   20               | bool_statement GREAT expr
   21               | bool_statement LESS expr
   22               | bool_statement GREAT_EQ expr
   23               | bool_statement LESS_EQ expr
   24               | bool_statement LOP_EQ expr
   25               | bool_statement NOT_EQ expr

   26 assign: IDENTIFIER LOP_ASSIGN expr

   27 declaration: T IDENTIFIER LOP_ASSIGN expr
   28            | T IDENTIFIER

   29 expr: expr ADD expr
   30     | expr SUB expr
   31     | NEG expr
   32     | expr MUL expr
   33     | expr DIV expr
   34     | expr MOD expr
   35     | IDENTIFIER
   36     | INTEGER
   37     | CHAR
   38     | STRING

   39 T: T_INT
   40  | T_CHAR
   41  | T_BOOL
   42  | T_STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 12 13
ELSE (259) 12
WHILE (260) 11
FOR (261)
RETURN (262)
T_CHAR (263) 40
T_INT (264) 39
T_STRING (265) 42
T_BOOL (266) 41
LOP_ASSIGN (267) 26 27
SEMICOLON (268) 6 7 8
LPAREN (269) 14
RPAREN (270) 14
LBRACK (271)
RBRACK (272)
LBRACE (273) 4 5
RBRACE (274) 4 5
IDENTIFIER (275) 26 27 28 35
INTEGER (276) 36
CHAR (277) 37
BOOL (278)
STRING (279) 38
LOP_EQ (280) 24
GREAT (281) 20
LESS (282) 21
GREAT_EQ (283) 22
LESS_EQ (284) 23
NOT_EQ (285) 25
ADD (286) 29
SUB (287) 30
MUL (288) 32
DIV (289) 33
MOD (290) 34
OR (291) 16
AND (292) 15
NOT (293) 17
NEG (294) 31


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
program (41)
    on left: 1, on right: 0
statements (42)
    on left: 2 3 4 5, on right: 1 3 4 11 12
statement (43)
    on left: 6 7 8 9 10, on right: 2 3 13
while (44)
    on left: 11, on right: 10
if_else (45)
    on left: 12 13, on right: 9
bool_statements (46)
    on left: 14 15 16 17 18, on right: 11 12 13 14 15 16 17
bool_statement (47)
    on left: 19 20 21 22 23 24 25, on right: 15 16 18 20 21 22 23 24
    25
assign (48)
    on left: 26, on right: 8
declaration (49)
    on left: 27 28, on right: 7
expr (50)
    on left: 29 30 31 32 33 34 35 36 37 38, on right: 19 20 21 22 23
    24 25 26 27 29 30 31 32 33 34
T (51)
    on left: 39 40 41 42, on right: 27 28


State 0

    0 $accept: . program $end

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    LBRACE      shift, and go to state 8
    IDENTIFIER  shift, and go to state 9

    program      go to state 10
    statements   go to state 11
    statement    go to state 12
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17


State 1

   12 if_else: IF . bool_statements statements ELSE statements
   13        | IF . bool_statements statement

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NOT         shift, and go to state 23
    NEG         shift, and go to state 24

    bool_statements  go to state 25
    bool_statement   go to state 26
    expr             go to state 27


State 2

   11 while: WHILE . bool_statements statements

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NOT         shift, and go to state 23
    NEG         shift, and go to state 24

    bool_statements  go to state 28
    bool_statement   go to state 26
    expr             go to state 27


State 3

   40 T: T_CHAR .

    $default  reduce using rule 40 (T)


State 4

   39 T: T_INT .

    $default  reduce using rule 39 (T)


State 5

   42 T: T_STRING .

    $default  reduce using rule 42 (T)


State 6

   41 T: T_BOOL .

    $default  reduce using rule 41 (T)


State 7

    6 statement: SEMICOLON .

    $default  reduce using rule 6 (statement)


State 8

    4 statements: LBRACE . statements RBRACE
    5           | LBRACE . RBRACE

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    LBRACE      shift, and go to state 8
    RBRACE      shift, and go to state 29
    IDENTIFIER  shift, and go to state 9

    statements   go to state 30
    statement    go to state 12
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17


State 9

   26 assign: IDENTIFIER . LOP_ASSIGN expr

    LOP_ASSIGN  shift, and go to state 31


State 10

    0 $accept: program . $end

    $end  shift, and go to state 32


State 11

    1 program: statements .
    3 statements: statements . statement

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    IDENTIFIER  shift, and go to state 9

    $default  reduce using rule 1 (program)

    statement    go to state 33
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17


State 12

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 13

   10 statement: while .

    $default  reduce using rule 10 (statement)


State 14

    9 statement: if_else .

    $default  reduce using rule 9 (statement)


State 15

    8 statement: assign . SEMICOLON

    SEMICOLON  shift, and go to state 34


State 16

    7 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 35


State 17

   27 declaration: T . IDENTIFIER LOP_ASSIGN expr
   28            | T . IDENTIFIER

    IDENTIFIER  shift, and go to state 36


State 18

   14 bool_statements: LPAREN . bool_statements RPAREN

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NOT         shift, and go to state 23
    NEG         shift, and go to state 24

    bool_statements  go to state 37
    bool_statement   go to state 26
    expr             go to state 27


State 19

   35 expr: IDENTIFIER .

    $default  reduce using rule 35 (expr)


State 20

   36 expr: INTEGER .

    $default  reduce using rule 36 (expr)


State 21

   37 expr: CHAR .

    $default  reduce using rule 37 (expr)


State 22

   38 expr: STRING .

    $default  reduce using rule 38 (expr)


State 23

   17 bool_statements: NOT . bool_statements

    LPAREN      shift, and go to state 18
    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NOT         shift, and go to state 23
    NEG         shift, and go to state 24

    bool_statements  go to state 38
    bool_statement   go to state 26
    expr             go to state 27


State 24

   31 expr: NEG . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 39


State 25

   12 if_else: IF bool_statements . statements ELSE statements
   13        | IF bool_statements . statement
   15 bool_statements: bool_statements . AND bool_statement
   16                | bool_statements . OR bool_statement

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    LBRACE      shift, and go to state 8
    IDENTIFIER  shift, and go to state 9
    OR          shift, and go to state 40
    AND         shift, and go to state 41

    statements   go to state 42
    statement    go to state 43
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17


State 26

   18 bool_statements: bool_statement .
   20 bool_statement: bool_statement . GREAT expr
   21               | bool_statement . LESS expr
   22               | bool_statement . GREAT_EQ expr
   23               | bool_statement . LESS_EQ expr
   24               | bool_statement . LOP_EQ expr
   25               | bool_statement . NOT_EQ expr

    LOP_EQ    shift, and go to state 44
    GREAT     shift, and go to state 45
    LESS      shift, and go to state 46
    GREAT_EQ  shift, and go to state 47
    LESS_EQ   shift, and go to state 48
    NOT_EQ    shift, and go to state 49

    $default  reduce using rule 18 (bool_statements)


State 27

   19 bool_statement: expr .
   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    ADD  shift, and go to state 50
    SUB  shift, and go to state 51
    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 19 (bool_statement)


State 28

   11 while: WHILE bool_statements . statements
   15 bool_statements: bool_statements . AND bool_statement
   16                | bool_statements . OR bool_statement

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    LBRACE      shift, and go to state 8
    IDENTIFIER  shift, and go to state 9
    OR          shift, and go to state 40
    AND         shift, and go to state 41

    statements   go to state 55
    statement    go to state 12
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17


State 29

    5 statements: LBRACE RBRACE .

    $default  reduce using rule 5 (statements)


State 30

    3 statements: statements . statement
    4           | LBRACE statements . RBRACE

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    RBRACE      shift, and go to state 56
    IDENTIFIER  shift, and go to state 9

    statement    go to state 33
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17


State 31

   26 assign: IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 57


State 32

    0 $accept: program $end .

    $default  accept


State 33

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 34

    8 statement: assign SEMICOLON .

    $default  reduce using rule 8 (statement)


State 35

    7 statement: declaration SEMICOLON .

    $default  reduce using rule 7 (statement)


State 36

   27 declaration: T IDENTIFIER . LOP_ASSIGN expr
   28            | T IDENTIFIER .

    LOP_ASSIGN  shift, and go to state 58

    $default  reduce using rule 28 (declaration)


State 37

   14 bool_statements: LPAREN bool_statements . RPAREN
   15                | bool_statements . AND bool_statement
   16                | bool_statements . OR bool_statement

    RPAREN  shift, and go to state 59
    OR      shift, and go to state 40
    AND     shift, and go to state 41


State 38

   15 bool_statements: bool_statements . AND bool_statement
   16                | bool_statements . OR bool_statement
   17                | NOT bool_statements .

    $default  reduce using rule 17 (bool_statements)


State 39

   29 expr: expr . ADD expr
   30     | expr . SUB expr
   31     | NEG expr .
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    $default  reduce using rule 31 (expr)


State 40

   16 bool_statements: bool_statements OR . bool_statement

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    bool_statement  go to state 60
    expr            go to state 27


State 41

   15 bool_statements: bool_statements AND . bool_statement

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    bool_statement  go to state 61
    expr            go to state 27


State 42

    3 statements: statements . statement
   12 if_else: IF bool_statements statements . ELSE statements

    IF          shift, and go to state 1
    ELSE        shift, and go to state 62
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    IDENTIFIER  shift, and go to state 9

    statement    go to state 33
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17


State 43

    2 statements: statement .
   13 if_else: IF bool_statements statement .

    $end        reduce using rule 13 (if_else)
    IF          reduce using rule 2 (statements)
    IF          [reduce using rule 13 (if_else)]
    ELSE        reduce using rule 2 (statements)
    ELSE        [reduce using rule 13 (if_else)]
    WHILE       reduce using rule 2 (statements)
    WHILE       [reduce using rule 13 (if_else)]
    T_CHAR      reduce using rule 2 (statements)
    T_CHAR      [reduce using rule 13 (if_else)]
    T_INT       reduce using rule 2 (statements)
    T_INT       [reduce using rule 13 (if_else)]
    T_STRING    reduce using rule 2 (statements)
    T_STRING    [reduce using rule 13 (if_else)]
    T_BOOL      reduce using rule 2 (statements)
    T_BOOL      [reduce using rule 13 (if_else)]
    SEMICOLON   reduce using rule 2 (statements)
    SEMICOLON   [reduce using rule 13 (if_else)]
    RBRACE      reduce using rule 13 (if_else)
    IDENTIFIER  reduce using rule 2 (statements)
    IDENTIFIER  [reduce using rule 13 (if_else)]
    $default    reduce using rule 2 (statements)


State 44

   24 bool_statement: bool_statement LOP_EQ . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 63


State 45

   20 bool_statement: bool_statement GREAT . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 64


State 46

   21 bool_statement: bool_statement LESS . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 65


State 47

   22 bool_statement: bool_statement GREAT_EQ . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 66


State 48

   23 bool_statement: bool_statement LESS_EQ . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 67


State 49

   25 bool_statement: bool_statement NOT_EQ . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 68


State 50

   29 expr: expr ADD . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 69


State 51

   30 expr: expr SUB . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 70


State 52

   32 expr: expr MUL . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 71


State 53

   33 expr: expr DIV . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 72


State 54

   34 expr: expr MOD . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 73


State 55

    3 statements: statements . statement
   11 while: WHILE bool_statements statements .

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    IDENTIFIER  shift, and go to state 9

    IF          [reduce using rule 11 (while)]
    WHILE       [reduce using rule 11 (while)]
    T_CHAR      [reduce using rule 11 (while)]
    T_INT       [reduce using rule 11 (while)]
    T_STRING    [reduce using rule 11 (while)]
    T_BOOL      [reduce using rule 11 (while)]
    SEMICOLON   [reduce using rule 11 (while)]
    IDENTIFIER  [reduce using rule 11 (while)]
    $default    reduce using rule 11 (while)

    statement    go to state 33
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17


State 56

    4 statements: LBRACE statements RBRACE .

    $default  reduce using rule 4 (statements)


State 57

   26 assign: IDENTIFIER LOP_ASSIGN expr .
   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    ADD  shift, and go to state 50
    SUB  shift, and go to state 51
    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 26 (assign)


State 58

   27 declaration: T IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 19
    INTEGER     shift, and go to state 20
    CHAR        shift, and go to state 21
    STRING      shift, and go to state 22
    NEG         shift, and go to state 24

    expr  go to state 74


State 59

   14 bool_statements: LPAREN bool_statements RPAREN .

    $default  reduce using rule 14 (bool_statements)


State 60

   16 bool_statements: bool_statements OR bool_statement .
   20 bool_statement: bool_statement . GREAT expr
   21               | bool_statement . LESS expr
   22               | bool_statement . GREAT_EQ expr
   23               | bool_statement . LESS_EQ expr
   24               | bool_statement . LOP_EQ expr
   25               | bool_statement . NOT_EQ expr

    LOP_EQ    shift, and go to state 44
    GREAT     shift, and go to state 45
    LESS      shift, and go to state 46
    GREAT_EQ  shift, and go to state 47
    LESS_EQ   shift, and go to state 48
    NOT_EQ    shift, and go to state 49

    $default  reduce using rule 16 (bool_statements)


State 61

   15 bool_statements: bool_statements AND bool_statement .
   20 bool_statement: bool_statement . GREAT expr
   21               | bool_statement . LESS expr
   22               | bool_statement . GREAT_EQ expr
   23               | bool_statement . LESS_EQ expr
   24               | bool_statement . LOP_EQ expr
   25               | bool_statement . NOT_EQ expr

    LOP_EQ    shift, and go to state 44
    GREAT     shift, and go to state 45
    LESS      shift, and go to state 46
    GREAT_EQ  shift, and go to state 47
    LESS_EQ   shift, and go to state 48
    NOT_EQ    shift, and go to state 49

    $default  reduce using rule 15 (bool_statements)


State 62

   12 if_else: IF bool_statements statements ELSE . statements

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    LBRACE      shift, and go to state 8
    IDENTIFIER  shift, and go to state 9

    statements   go to state 75
    statement    go to state 12
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17


State 63

   24 bool_statement: bool_statement LOP_EQ expr .
   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    ADD  shift, and go to state 50
    SUB  shift, and go to state 51
    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 24 (bool_statement)


State 64

   20 bool_statement: bool_statement GREAT expr .
   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    ADD  shift, and go to state 50
    SUB  shift, and go to state 51
    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 20 (bool_statement)


State 65

   21 bool_statement: bool_statement LESS expr .
   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    ADD  shift, and go to state 50
    SUB  shift, and go to state 51
    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 21 (bool_statement)


State 66

   22 bool_statement: bool_statement GREAT_EQ expr .
   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    ADD  shift, and go to state 50
    SUB  shift, and go to state 51
    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 22 (bool_statement)


State 67

   23 bool_statement: bool_statement LESS_EQ expr .
   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    ADD  shift, and go to state 50
    SUB  shift, and go to state 51
    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 23 (bool_statement)


State 68

   25 bool_statement: bool_statement NOT_EQ expr .
   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    ADD  shift, and go to state 50
    SUB  shift, and go to state 51
    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 25 (bool_statement)


State 69

   29 expr: expr . ADD expr
   29     | expr ADD expr .
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 29 (expr)


State 70

   29 expr: expr . ADD expr
   30     | expr . SUB expr
   30     | expr SUB expr .
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 30 (expr)


State 71

   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   32     | expr MUL expr .
   33     | expr . DIV expr
   34     | expr . MOD expr

    $default  reduce using rule 32 (expr)


State 72

   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   33     | expr DIV expr .
   34     | expr . MOD expr

    $default  reduce using rule 33 (expr)


State 73

   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr
   34     | expr MOD expr .

    $default  reduce using rule 34 (expr)


State 74

   27 declaration: T IDENTIFIER LOP_ASSIGN expr .
   29 expr: expr . ADD expr
   30     | expr . SUB expr
   32     | expr . MUL expr
   33     | expr . DIV expr
   34     | expr . MOD expr

    ADD  shift, and go to state 50
    SUB  shift, and go to state 51
    MUL  shift, and go to state 52
    DIV  shift, and go to state 53
    MOD  shift, and go to state 54

    $default  reduce using rule 27 (declaration)


State 75

    3 statements: statements . statement
   12 if_else: IF bool_statements statements ELSE statements .

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    T_CHAR      shift, and go to state 3
    T_INT       shift, and go to state 4
    T_STRING    shift, and go to state 5
    T_BOOL      shift, and go to state 6
    SEMICOLON   shift, and go to state 7
    IDENTIFIER  shift, and go to state 9

    IF          [reduce using rule 12 (if_else)]
    WHILE       [reduce using rule 12 (if_else)]
    T_CHAR      [reduce using rule 12 (if_else)]
    T_INT       [reduce using rule 12 (if_else)]
    T_STRING    [reduce using rule 12 (if_else)]
    T_BOOL      [reduce using rule 12 (if_else)]
    SEMICOLON   [reduce using rule 12 (if_else)]
    IDENTIFIER  [reduce using rule 12 (if_else)]
    $default    reduce using rule 12 (if_else)

    statement    go to state 33
    while        go to state 13
    if_else      go to state 14
    assign       go to state 15
    declaration  go to state 16
    T            go to state 17
