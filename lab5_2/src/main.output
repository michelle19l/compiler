Terminals unused in grammar

   LBRACK
   RBRACK
   BOOL
   LOP_EQ


State 30 conflicts: 2 shift/reduce
State 31 conflicts: 5 shift/reduce
State 34 conflicts: 1 shift/reduce
State 46 conflicts: 5 shift/reduce
State 47 conflicts: 5 shift/reduce
State 48 conflicts: 5 shift/reduce
State 49 conflicts: 5 shift/reduce
State 50 conflicts: 5 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement
    4           | LBRACE statements RBRACE

    5 statement: SEMICOLON
    6          | declaration SEMICOLON
    7          | if_else

    8 if_else: IF bool_statements statement ELSE statement
    9        | IF bool_statements statement

   10 bool_statements: LPAREN bool_statements RPAREN
   11                | bool_statements AND bool_statement
   12                | bool_statements OR bool_statement
   13                | NOT bool_statements
   14                | bool_statement

   15 bool_statement: expr

   16 declaration: T IDENTIFIER LOP_ASSIGN expr
   17            | T IDENTIFIER

   18 expr: expr ADD expr
   19     | expr SUB expr
   20     | NEG expr
   21     | expr MUL expr
   22     | expr DIV expr
   23     | expr MOD expr
   24     | IDENTIFIER
   25     | INTEGER
   26     | CHAR
   27     | STRING

   28 T: T_INT
   29  | T_CHAR
   30  | T_BOOL
   31  | T_STRING


Terminals, with rules where they appear

$end (0) 0
error (256)
IF (258) 8 9
ELSE (259) 8
T_CHAR (260) 29
T_INT (261) 28
T_STRING (262) 31
T_BOOL (263) 30
LOP_ASSIGN (264) 16
SEMICOLON (265) 5 6
LPAREN (266) 10
RPAREN (267) 10
LBRACK (268)
RBRACK (269)
LBRACE (270) 4
RBRACE (271) 4
IDENTIFIER (272) 16 17 24
INTEGER (273) 25
CHAR (274) 26
BOOL (275)
STRING (276) 27
ADD (277) 18
SUB (278) 19
MUL (279) 21
DIV (280) 22
MOD (281) 23
OR (282) 12
AND (283) 11
NOT (284) 13
NEG (285) 20
LOP_EQ (286)


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
program (33)
    on left: 1, on right: 0
statements (34)
    on left: 2 3 4, on right: 1 3 4
statement (35)
    on left: 5 6 7, on right: 2 3 8 9
if_else (36)
    on left: 8 9, on right: 7
bool_statements (37)
    on left: 10 11 12 13 14, on right: 8 9 10 11 12 13
bool_statement (38)
    on left: 15, on right: 11 12 14
declaration (39)
    on left: 16 17, on right: 6
expr (40)
    on left: 18 19 20 21 22 23 24 25 26 27, on right: 15 16 18 19 20
    21 22 23
T (41)
    on left: 28 29 30 31, on right: 16 17


State 0

    0 $accept: . program $end

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6
    LBRACE     shift, and go to state 7

    program      go to state 8
    statements   go to state 9
    statement    go to state 10
    if_else      go to state 11
    declaration  go to state 12
    T            go to state 13


State 1

    8 if_else: IF . bool_statements statement ELSE statement
    9        | IF . bool_statements statement

    LPAREN      shift, and go to state 14
    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NOT         shift, and go to state 19
    NEG         shift, and go to state 20

    bool_statements  go to state 21
    bool_statement   go to state 22
    expr             go to state 23


State 2

   29 T: T_CHAR .

    $default  reduce using rule 29 (T)


State 3

   28 T: T_INT .

    $default  reduce using rule 28 (T)


State 4

   31 T: T_STRING .

    $default  reduce using rule 31 (T)


State 5

   30 T: T_BOOL .

    $default  reduce using rule 30 (T)


State 6

    5 statement: SEMICOLON .

    $default  reduce using rule 5 (statement)


State 7

    4 statements: LBRACE . statements RBRACE

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6
    LBRACE     shift, and go to state 7

    statements   go to state 24
    statement    go to state 10
    if_else      go to state 11
    declaration  go to state 12
    T            go to state 13


State 8

    0 $accept: program . $end

    $end  shift, and go to state 25


State 9

    1 program: statements .
    3 statements: statements . statement

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6

    $default  reduce using rule 1 (program)

    statement    go to state 26
    if_else      go to state 11
    declaration  go to state 12
    T            go to state 13


State 10

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 11

    7 statement: if_else .

    $default  reduce using rule 7 (statement)


State 12

    6 statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 27


State 13

   16 declaration: T . IDENTIFIER LOP_ASSIGN expr
   17            | T . IDENTIFIER

    IDENTIFIER  shift, and go to state 28


State 14

   10 bool_statements: LPAREN . bool_statements RPAREN

    LPAREN      shift, and go to state 14
    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NOT         shift, and go to state 19
    NEG         shift, and go to state 20

    bool_statements  go to state 29
    bool_statement   go to state 22
    expr             go to state 23


State 15

   24 expr: IDENTIFIER .

    $default  reduce using rule 24 (expr)


State 16

   25 expr: INTEGER .

    $default  reduce using rule 25 (expr)


State 17

   26 expr: CHAR .

    $default  reduce using rule 26 (expr)


State 18

   27 expr: STRING .

    $default  reduce using rule 27 (expr)


State 19

   13 bool_statements: NOT . bool_statements

    LPAREN      shift, and go to state 14
    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NOT         shift, and go to state 19
    NEG         shift, and go to state 20

    bool_statements  go to state 30
    bool_statement   go to state 22
    expr             go to state 23


State 20

   20 expr: NEG . expr

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NEG         shift, and go to state 20

    expr  go to state 31


State 21

    8 if_else: IF bool_statements . statement ELSE statement
    9        | IF bool_statements . statement
   11 bool_statements: bool_statements . AND bool_statement
   12                | bool_statements . OR bool_statement

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6
    OR         shift, and go to state 32
    AND        shift, and go to state 33

    statement    go to state 34
    if_else      go to state 11
    declaration  go to state 12
    T            go to state 13


State 22

   14 bool_statements: bool_statement .

    $default  reduce using rule 14 (bool_statements)


State 23

   15 bool_statement: expr .
   18 expr: expr . ADD expr
   19     | expr . SUB expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . MOD expr

    ADD  shift, and go to state 35
    SUB  shift, and go to state 36
    MUL  shift, and go to state 37
    DIV  shift, and go to state 38
    MOD  shift, and go to state 39

    $default  reduce using rule 15 (bool_statement)


State 24

    3 statements: statements . statement
    4           | LBRACE statements . RBRACE

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6
    RBRACE     shift, and go to state 40

    statement    go to state 26
    if_else      go to state 11
    declaration  go to state 12
    T            go to state 13


State 25

    0 $accept: program $end .

    $default  accept


State 26

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 27

    6 statement: declaration SEMICOLON .

    $default  reduce using rule 6 (statement)


State 28

   16 declaration: T IDENTIFIER . LOP_ASSIGN expr
   17            | T IDENTIFIER .

    LOP_ASSIGN  shift, and go to state 41

    $default  reduce using rule 17 (declaration)


State 29

   10 bool_statements: LPAREN bool_statements . RPAREN
   11                | bool_statements . AND bool_statement
   12                | bool_statements . OR bool_statement

    RPAREN  shift, and go to state 42
    OR      shift, and go to state 32
    AND     shift, and go to state 33


State 30

   11 bool_statements: bool_statements . AND bool_statement
   12                | bool_statements . OR bool_statement
   13                | NOT bool_statements .

    OR   shift, and go to state 32
    AND  shift, and go to state 33

    OR        [reduce using rule 13 (bool_statements)]
    AND       [reduce using rule 13 (bool_statements)]
    $default  reduce using rule 13 (bool_statements)


State 31

   18 expr: expr . ADD expr
   19     | expr . SUB expr
   20     | NEG expr .
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . MOD expr

    ADD  shift, and go to state 35
    SUB  shift, and go to state 36
    MUL  shift, and go to state 37
    DIV  shift, and go to state 38
    MOD  shift, and go to state 39

    ADD       [reduce using rule 20 (expr)]
    SUB       [reduce using rule 20 (expr)]
    MUL       [reduce using rule 20 (expr)]
    DIV       [reduce using rule 20 (expr)]
    MOD       [reduce using rule 20 (expr)]
    $default  reduce using rule 20 (expr)


State 32

   12 bool_statements: bool_statements OR . bool_statement

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NEG         shift, and go to state 20

    bool_statement  go to state 43
    expr            go to state 23


State 33

   11 bool_statements: bool_statements AND . bool_statement

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NEG         shift, and go to state 20

    bool_statement  go to state 44
    expr            go to state 23


State 34

    8 if_else: IF bool_statements statement . ELSE statement
    9        | IF bool_statements statement .

    ELSE  shift, and go to state 45

    ELSE      [reduce using rule 9 (if_else)]
    $default  reduce using rule 9 (if_else)


State 35

   18 expr: expr ADD . expr

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NEG         shift, and go to state 20

    expr  go to state 46


State 36

   19 expr: expr SUB . expr

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NEG         shift, and go to state 20

    expr  go to state 47


State 37

   21 expr: expr MUL . expr

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NEG         shift, and go to state 20

    expr  go to state 48


State 38

   22 expr: expr DIV . expr

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NEG         shift, and go to state 20

    expr  go to state 49


State 39

   23 expr: expr MOD . expr

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NEG         shift, and go to state 20

    expr  go to state 50


State 40

    4 statements: LBRACE statements RBRACE .

    $default  reduce using rule 4 (statements)


State 41

   16 declaration: T IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 15
    INTEGER     shift, and go to state 16
    CHAR        shift, and go to state 17
    STRING      shift, and go to state 18
    NEG         shift, and go to state 20

    expr  go to state 51


State 42

   10 bool_statements: LPAREN bool_statements RPAREN .

    $default  reduce using rule 10 (bool_statements)


State 43

   12 bool_statements: bool_statements OR bool_statement .

    $default  reduce using rule 12 (bool_statements)


State 44

   11 bool_statements: bool_statements AND bool_statement .

    $default  reduce using rule 11 (bool_statements)


State 45

    8 if_else: IF bool_statements statement ELSE . statement

    IF         shift, and go to state 1
    T_CHAR     shift, and go to state 2
    T_INT      shift, and go to state 3
    T_STRING   shift, and go to state 4
    T_BOOL     shift, and go to state 5
    SEMICOLON  shift, and go to state 6

    statement    go to state 52
    if_else      go to state 11
    declaration  go to state 12
    T            go to state 13


State 46

   18 expr: expr . ADD expr
   18     | expr ADD expr .
   19     | expr . SUB expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . MOD expr

    ADD  shift, and go to state 35
    SUB  shift, and go to state 36
    MUL  shift, and go to state 37
    DIV  shift, and go to state 38
    MOD  shift, and go to state 39

    ADD       [reduce using rule 18 (expr)]
    SUB       [reduce using rule 18 (expr)]
    MUL       [reduce using rule 18 (expr)]
    DIV       [reduce using rule 18 (expr)]
    MOD       [reduce using rule 18 (expr)]
    $default  reduce using rule 18 (expr)


State 47

   18 expr: expr . ADD expr
   19     | expr . SUB expr
   19     | expr SUB expr .
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . MOD expr

    ADD  shift, and go to state 35
    SUB  shift, and go to state 36
    MUL  shift, and go to state 37
    DIV  shift, and go to state 38
    MOD  shift, and go to state 39

    ADD       [reduce using rule 19 (expr)]
    SUB       [reduce using rule 19 (expr)]
    MUL       [reduce using rule 19 (expr)]
    DIV       [reduce using rule 19 (expr)]
    MOD       [reduce using rule 19 (expr)]
    $default  reduce using rule 19 (expr)


State 48

   18 expr: expr . ADD expr
   19     | expr . SUB expr
   21     | expr . MUL expr
   21     | expr MUL expr .
   22     | expr . DIV expr
   23     | expr . MOD expr

    ADD  shift, and go to state 35
    SUB  shift, and go to state 36
    MUL  shift, and go to state 37
    DIV  shift, and go to state 38
    MOD  shift, and go to state 39

    ADD       [reduce using rule 21 (expr)]
    SUB       [reduce using rule 21 (expr)]
    MUL       [reduce using rule 21 (expr)]
    DIV       [reduce using rule 21 (expr)]
    MOD       [reduce using rule 21 (expr)]
    $default  reduce using rule 21 (expr)


State 49

   18 expr: expr . ADD expr
   19     | expr . SUB expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   22     | expr DIV expr .
   23     | expr . MOD expr

    ADD  shift, and go to state 35
    SUB  shift, and go to state 36
    MUL  shift, and go to state 37
    DIV  shift, and go to state 38
    MOD  shift, and go to state 39

    ADD       [reduce using rule 22 (expr)]
    SUB       [reduce using rule 22 (expr)]
    MUL       [reduce using rule 22 (expr)]
    DIV       [reduce using rule 22 (expr)]
    MOD       [reduce using rule 22 (expr)]
    $default  reduce using rule 22 (expr)


State 50

   18 expr: expr . ADD expr
   19     | expr . SUB expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . MOD expr
   23     | expr MOD expr .

    ADD  shift, and go to state 35
    SUB  shift, and go to state 36
    MUL  shift, and go to state 37
    DIV  shift, and go to state 38
    MOD  shift, and go to state 39

    ADD       [reduce using rule 23 (expr)]
    SUB       [reduce using rule 23 (expr)]
    MUL       [reduce using rule 23 (expr)]
    DIV       [reduce using rule 23 (expr)]
    MOD       [reduce using rule 23 (expr)]
    $default  reduce using rule 23 (expr)


State 51

   16 declaration: T IDENTIFIER LOP_ASSIGN expr .
   18 expr: expr . ADD expr
   19     | expr . SUB expr
   21     | expr . MUL expr
   22     | expr . DIV expr
   23     | expr . MOD expr

    ADD  shift, and go to state 35
    SUB  shift, and go to state 36
    MUL  shift, and go to state 37
    DIV  shift, and go to state 38
    MOD  shift, and go to state 39

    $default  reduce using rule 16 (declaration)


State 52

    8 if_else: IF bool_statements statement ELSE statement .

    $default  reduce using rule 8 (if_else)
