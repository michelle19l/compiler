Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: statement
    3           | statements statement

    4 statement: instruction
    5          | if_else
    6          | while
    7          | LBRACE statements RBRACE

    8 if_else: IF bool_statment statement
    9        | IF bool_statment statement ELSE statement

   10 while: WHILE bool_statment statement

   11 bool_statment: LPAREN bool_expr RPAREN

   12 instruction: type ID ASSIGN expr SEMICOLON
   13            | ID ASSIGN expr SEMICOLON
   14            | printf SEMICOLON
   15            | scanf SEMICOLON

   16 printf: PRINTF LPAREN expr RPAREN

   17 scanf: SCANF LPAREN expr RPAREN

   18 bool_expr: TRUE
   19          | FALSE
   20          | expr EQUAL expr
   21          | NOT bool_expr

   22 expr: ID
   23     | INTEGER
   24     | expr ADD expr
   25     | %empty

   26 type: INT
   27     | VOID


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 12 13 22
INTEGER (259) 23
IF (260) 8 9
ELSE (261) 9
WHILE (262) 10
INT (263) 26
VOID (264) 27
LPAREN (265) 11 16 17
RPAREN (266) 11 16 17
LBRACE (267) 7
RBRACE (268) 7
SEMICOLON (269) 12 13 14 15
TRUE (270) 18
FALSE (271) 19
ADD (272) 24
ASSIGN (273) 12 13
EQUAL (274) 20
NOT (275) 21
PRINTF (276) 16
SCANF (277) 17
LOWER_THEN_ELSE (278)


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
program (25)
    on left: 1, on right: 0
statements (26)
    on left: 2 3, on right: 1 3 7
statement (27)
    on left: 4 5 6 7, on right: 2 3 8 9 10
if_else (28)
    on left: 8 9, on right: 5
while (29)
    on left: 10, on right: 6
bool_statment (30)
    on left: 11, on right: 8 9 10
instruction (31)
    on left: 12 13 14 15, on right: 4
printf (32)
    on left: 16, on right: 14
scanf (33)
    on left: 17, on right: 15
bool_expr (34)
    on left: 18 19 20 21, on right: 11 21
expr (35)
    on left: 22 23 24 25, on right: 12 13 16 17 20 24
type (36)
    on left: 26 27, on right: 12


State 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    INT     shift, and go to state 4
    VOID    shift, and go to state 5
    LBRACE  shift, and go to state 6
    PRINTF  shift, and go to state 7
    SCANF   shift, and go to state 8

    program      go to state 9
    statements   go to state 10
    statement    go to state 11
    if_else      go to state 12
    while        go to state 13
    instruction  go to state 14
    printf       go to state 15
    scanf        go to state 16
    type         go to state 17


State 1

   13 instruction: ID . ASSIGN expr SEMICOLON

    ASSIGN  shift, and go to state 18


State 2

    8 if_else: IF . bool_statment statement
    9        | IF . bool_statment statement ELSE statement

    LPAREN  shift, and go to state 19

    bool_statment  go to state 20


State 3

   10 while: WHILE . bool_statment statement

    LPAREN  shift, and go to state 19

    bool_statment  go to state 21


State 4

   26 type: INT .

    $default  reduce using rule 26 (type)


State 5

   27 type: VOID .

    $default  reduce using rule 27 (type)


State 6

    7 statement: LBRACE . statements RBRACE

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    INT     shift, and go to state 4
    VOID    shift, and go to state 5
    LBRACE  shift, and go to state 6
    PRINTF  shift, and go to state 7
    SCANF   shift, and go to state 8

    statements   go to state 22
    statement    go to state 11
    if_else      go to state 12
    while        go to state 13
    instruction  go to state 14
    printf       go to state 15
    scanf        go to state 16
    type         go to state 17


State 7

   16 printf: PRINTF . LPAREN expr RPAREN

    LPAREN  shift, and go to state 23


State 8

   17 scanf: SCANF . LPAREN expr RPAREN

    LPAREN  shift, and go to state 24


State 9

    0 $accept: program . $end

    $end  shift, and go to state 25


State 10

    1 program: statements .
    3 statements: statements . statement

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    INT     shift, and go to state 4
    VOID    shift, and go to state 5
    LBRACE  shift, and go to state 6
    PRINTF  shift, and go to state 7
    SCANF   shift, and go to state 8

    $default  reduce using rule 1 (program)

    statement    go to state 26
    if_else      go to state 12
    while        go to state 13
    instruction  go to state 14
    printf       go to state 15
    scanf        go to state 16
    type         go to state 17


State 11

    2 statements: statement .

    $default  reduce using rule 2 (statements)


State 12

    5 statement: if_else .

    $default  reduce using rule 5 (statement)


State 13

    6 statement: while .

    $default  reduce using rule 6 (statement)


State 14

    4 statement: instruction .

    $default  reduce using rule 4 (statement)


State 15

   14 instruction: printf . SEMICOLON

    SEMICOLON  shift, and go to state 27


State 16

   15 instruction: scanf . SEMICOLON

    SEMICOLON  shift, and go to state 28


State 17

   12 instruction: type . ID ASSIGN expr SEMICOLON

    ID  shift, and go to state 29


State 18

   13 instruction: ID ASSIGN . expr SEMICOLON

    ID       shift, and go to state 30
    INTEGER  shift, and go to state 31

    $default  reduce using rule 25 (expr)

    expr  go to state 32


State 19

   11 bool_statment: LPAREN . bool_expr RPAREN

    ID       shift, and go to state 30
    INTEGER  shift, and go to state 31
    TRUE     shift, and go to state 33
    FALSE    shift, and go to state 34
    NOT      shift, and go to state 35

    $default  reduce using rule 25 (expr)

    bool_expr  go to state 36
    expr       go to state 37


State 20

    8 if_else: IF bool_statment . statement
    9        | IF bool_statment . statement ELSE statement

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    INT     shift, and go to state 4
    VOID    shift, and go to state 5
    LBRACE  shift, and go to state 6
    PRINTF  shift, and go to state 7
    SCANF   shift, and go to state 8

    statement    go to state 38
    if_else      go to state 12
    while        go to state 13
    instruction  go to state 14
    printf       go to state 15
    scanf        go to state 16
    type         go to state 17


State 21

   10 while: WHILE bool_statment . statement

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    INT     shift, and go to state 4
    VOID    shift, and go to state 5
    LBRACE  shift, and go to state 6
    PRINTF  shift, and go to state 7
    SCANF   shift, and go to state 8

    statement    go to state 39
    if_else      go to state 12
    while        go to state 13
    instruction  go to state 14
    printf       go to state 15
    scanf        go to state 16
    type         go to state 17


State 22

    3 statements: statements . statement
    7 statement: LBRACE statements . RBRACE

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    INT     shift, and go to state 4
    VOID    shift, and go to state 5
    LBRACE  shift, and go to state 6
    RBRACE  shift, and go to state 40
    PRINTF  shift, and go to state 7
    SCANF   shift, and go to state 8

    statement    go to state 26
    if_else      go to state 12
    while        go to state 13
    instruction  go to state 14
    printf       go to state 15
    scanf        go to state 16
    type         go to state 17


State 23

   16 printf: PRINTF LPAREN . expr RPAREN

    ID       shift, and go to state 30
    INTEGER  shift, and go to state 31

    $default  reduce using rule 25 (expr)

    expr  go to state 41


State 24

   17 scanf: SCANF LPAREN . expr RPAREN

    ID       shift, and go to state 30
    INTEGER  shift, and go to state 31

    $default  reduce using rule 25 (expr)

    expr  go to state 42


State 25

    0 $accept: program $end .

    $default  accept


State 26

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 27

   14 instruction: printf SEMICOLON .

    $default  reduce using rule 14 (instruction)


State 28

   15 instruction: scanf SEMICOLON .

    $default  reduce using rule 15 (instruction)


State 29

   12 instruction: type ID . ASSIGN expr SEMICOLON

    ASSIGN  shift, and go to state 43


State 30

   22 expr: ID .

    $default  reduce using rule 22 (expr)


State 31

   23 expr: INTEGER .

    $default  reduce using rule 23 (expr)


State 32

   13 instruction: ID ASSIGN expr . SEMICOLON
   24 expr: expr . ADD expr

    SEMICOLON  shift, and go to state 44
    ADD        shift, and go to state 45


State 33

   18 bool_expr: TRUE .

    $default  reduce using rule 18 (bool_expr)


State 34

   19 bool_expr: FALSE .

    $default  reduce using rule 19 (bool_expr)


State 35

   21 bool_expr: NOT . bool_expr

    ID       shift, and go to state 30
    INTEGER  shift, and go to state 31
    TRUE     shift, and go to state 33
    FALSE    shift, and go to state 34
    NOT      shift, and go to state 35

    $default  reduce using rule 25 (expr)

    bool_expr  go to state 46
    expr       go to state 37


State 36

   11 bool_statment: LPAREN bool_expr . RPAREN

    RPAREN  shift, and go to state 47


State 37

   20 bool_expr: expr . EQUAL expr
   24 expr: expr . ADD expr

    ADD    shift, and go to state 45
    EQUAL  shift, and go to state 48


State 38

    8 if_else: IF bool_statment statement .
    9        | IF bool_statment statement . ELSE statement

    ELSE  shift, and go to state 49

    $default  reduce using rule 8 (if_else)


State 39

   10 while: WHILE bool_statment statement .

    $default  reduce using rule 10 (while)


State 40

    7 statement: LBRACE statements RBRACE .

    $default  reduce using rule 7 (statement)


State 41

   16 printf: PRINTF LPAREN expr . RPAREN
   24 expr: expr . ADD expr

    RPAREN  shift, and go to state 50
    ADD     shift, and go to state 45


State 42

   17 scanf: SCANF LPAREN expr . RPAREN
   24 expr: expr . ADD expr

    RPAREN  shift, and go to state 51
    ADD     shift, and go to state 45


State 43

   12 instruction: type ID ASSIGN . expr SEMICOLON

    ID       shift, and go to state 30
    INTEGER  shift, and go to state 31

    $default  reduce using rule 25 (expr)

    expr  go to state 52


State 44

   13 instruction: ID ASSIGN expr SEMICOLON .

    $default  reduce using rule 13 (instruction)


State 45

   24 expr: expr ADD . expr

    ID       shift, and go to state 30
    INTEGER  shift, and go to state 31

    $default  reduce using rule 25 (expr)

    expr  go to state 53


State 46

   21 bool_expr: NOT bool_expr .

    $default  reduce using rule 21 (bool_expr)


State 47

   11 bool_statment: LPAREN bool_expr RPAREN .

    $default  reduce using rule 11 (bool_statment)


State 48

   20 bool_expr: expr EQUAL . expr

    ID       shift, and go to state 30
    INTEGER  shift, and go to state 31

    $default  reduce using rule 25 (expr)

    expr  go to state 54


State 49

    9 if_else: IF bool_statment statement ELSE . statement

    ID      shift, and go to state 1
    IF      shift, and go to state 2
    WHILE   shift, and go to state 3
    INT     shift, and go to state 4
    VOID    shift, and go to state 5
    LBRACE  shift, and go to state 6
    PRINTF  shift, and go to state 7
    SCANF   shift, and go to state 8

    statement    go to state 55
    if_else      go to state 12
    while        go to state 13
    instruction  go to state 14
    printf       go to state 15
    scanf        go to state 16
    type         go to state 17


State 50

   16 printf: PRINTF LPAREN expr RPAREN .

    $default  reduce using rule 16 (printf)


State 51

   17 scanf: SCANF LPAREN expr RPAREN .

    $default  reduce using rule 17 (scanf)


State 52

   12 instruction: type ID ASSIGN expr . SEMICOLON
   24 expr: expr . ADD expr

    SEMICOLON  shift, and go to state 56
    ADD        shift, and go to state 45


State 53

   24 expr: expr . ADD expr
   24     | expr ADD expr .

    $default  reduce using rule 24 (expr)


State 54

   20 bool_expr: expr EQUAL expr .
   24 expr: expr . ADD expr

    ADD  shift, and go to state 45

    $default  reduce using rule 20 (bool_expr)


State 55

    9 if_else: IF bool_statment statement ELSE statement .

    $default  reduce using rule 9 (if_else)


State 56

   12 instruction: type ID ASSIGN expr SEMICOLON .

    $default  reduce using rule 12 (instruction)
